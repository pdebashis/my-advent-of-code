[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Debashis\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Debashis\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 95.9662ms
[debug]       Load.loadUnit: defsScala took 0.3315ms
[debug] [Loading] Scanning directory C:\Users\Debashis\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Debashis\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.3133 ms
[debug]           Load.resolveProject(global-plugins) took 56.8078ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Debashis\.sbt\1.0\plugins, plugins: List(<none>))) took 104.4771ms
[debug] [Loading] Done in C:\Users\Debashis\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 134.0519ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2806ms
[debug]     Load.loadUnit(file:/C:/Users/Debashis/.sbt/1.0/plugins/, ...) took 242.0854ms
[debug]   Load.apply: load took 488.0518ms
[debug]   Load.apply: resolveProjects took 9.3097ms
[debug]   Load.apply: finalTransforms took 68.7885ms
[debug]   Load.apply: config.delegates took 7.8896ms
[debug]   Load.apply: Def.make(settings)... took 390.0521ms
[debug]   Load.apply: structureIndex took 92.1529ms
[debug]   Load.apply: mkStreams took 1.7553ms
[info] loading global plugins from C:\Users\Debashis\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2326.5655ms
[debug]           Load.loadUnit: plugins took 21.1632ms
[debug]           Load.loadUnit: defsScala took 0.0054ms
[debug] [Loading] Scanning directory C:\Users\Debashis\Documents\GitHub\MyAdventOfCode\project
[debug]             Load.loadUnit: mkEval took 6.4139ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Debashis\Documents\GitHub\MyAdventOfCode\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6852 ms
[info] loading settings for project myadventofcode-build from idea.sbt ...
[debug]               Load.resolveProject(myadventofcode-build) took 5.5787ms
[debug]             Load.loadTransitive: finalizeProject(Project(id myadventofcode-build, base: C:\Users\Debashis\Documents\GitHub\MyAdventOfCode\project, plugins: List(<none>))) took 8.1266ms
[debug] [Loading] Done in C:\Users\Debashis\Documents\GitHub\MyAdventOfCode\project, returning: (myadventofcode-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2252.6046ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.02ms
[debug]         Load.loadUnit(file:/C:/Users/Debashis/Documents/GitHub/MyAdventOfCode/project/, ...) took 2281.7897ms
[debug]       Load.apply: load took 2283.4643ms
[debug]       Load.apply: resolveProjects took 0.1667ms
[debug]       Load.apply: finalTransforms took 10.6108ms
[debug]       Load.apply: config.delegates took 0.5146ms
[debug]       Load.apply: Def.make(settings)... took 79.6587ms
[debug]       Load.apply: structureIndex took 25.2383ms
[debug]       Load.apply: mkStreams took 0.0039ms
[info] loading project definition from C:\Users\Debashis\Documents\GitHub\MyAdventOfCode\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4648.9347ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\Debashis\Documents\GitHub\MyAdventOfCode
[debug]       Load.loadUnit: mkEval took 0.4389ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Debashis\Documents\GitHub\MyAdventOfCode, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4793 ms
[info] loading settings for project myadventofcode from build.sbt ...
[debug]         Load.resolveProject(myadventofcode) took 28.1584ms
[debug]       Load.loadTransitive: finalizeProject(Project(id myadventofcode, base: C:\Users\Debashis\Documents\GitHub\MyAdventOfCode, plugins: List(<none>))) took 32.2068ms
[debug] [Loading] Done in C:\Users\Debashis\Documents\GitHub\MyAdventOfCode, returning: (myadventofcode)
[debug]     Load.loadUnit: loadedProjectsRaw took 1108.3385ms
[debug]     Load.loadUnit: cleanEvalClasses took 30.5867ms
[debug]   Load.loadUnit(file:/C:/Users/Debashis/Documents/GitHub/MyAdventOfCode/, ...) took 5788.8102ms
[debug] Load.apply: load took 5790.4278ms
[debug] Load.apply: resolveProjects took 0.156ms
[debug] Load.apply: finalTransforms took 22.2446ms
[debug] Load.apply: config.delegates took 0.2804ms
[debug] Load.apply: Def.make(settings)... took 57.8691ms
[debug] Load.apply: structureIndex took 22.0217ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to MyScalaProject (in build file:/C:/Users/Debashis/Documents/GitHub/MyAdventOfCode/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50491 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50491, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MyScalaProject (in build file:/C:/Users/Debashis/Documents/GitHub/MyAdventOfCode/)
[debug] > Exec(idea-shell, None, None)
